[project]
name = "enterprise-rag"
version = "0.1.0"
description = "Production-grade RAG system for enterprise deployments in regulated industries"
authors = [
    {name = "Ritesh Rana", email = "riteshrana36@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["rag", "retrieval", "llm", "enterprise", "production"]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "python-multipart>=0.0.6",
    "langchain>=0.1.0",
    "langchain-community>=0.0.10",
    "llama-index>=0.9.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "sentence-transformers>=2.2.0",
    "transformers>=4.35.0",
    "torch>=2.0.0",
    "qdrant-client>=1.6.0",
    "weaviate-client>=3.25.0",
    "chromadb>=0.4.0",
    "pymongo>=4.5.0",
    "redis>=5.0.0",
    "celery>=5.3.0",
    "pypdf>=3.17.0",
    "python-docx>=1.0.0",
    "openpyxl>=3.1.0",
    "python-pptx>=0.6.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "pillow>=10.0.0",
    "pytesseract>=0.3.10",
    "rank-bm25>=0.2.2",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
    "httpx>=0.25.0",
    "tenacity>=8.2.0",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "ipython>=8.17.0",
    "jupyter>=1.0.0",
]

evaluation = [
    "ragas>=0.1.0",
    "deepeval>=0.20.0",
    "trulens-eval>=0.18.0",
]

deployment = [
    "gunicorn>=21.2.0",
    "kubernetes>=28.1.0",
    "docker>=6.1.0",
]

[project.urls]
Homepage = "https://github.com/ambicuity/Enterprise-Rag"
Documentation = "https://github.com/ambicuity/Enterprise-Rag/tree/main/docs"
Repository = "https://github.com/ambicuity/Enterprise-Rag"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.black]
line-length = 100
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "llama_index.*",
    "qdrant_client.*",
    "weaviate.*",
    "rank_bm25.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=src --cov-report=term-missing --cov-report=html"
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
